{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","padding","justifyContent","welcome","margin","getstarted","borderRadius","backgroundColor","width","color","fontSize","border","menuButton","marginRight","spacing","title","flexGrow","DialogTitle","withStyles","closeButton","position","right","top","palette","grey","props","children","classes","onClose","other","disableTypography","className","Typography","variant","IconButton","arial-black","onClick","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","App","React","useState","open","setOpen","handleClose","AppBar","Toolbar","edge","Button","Container","maxWidth","Dialog","aria-labelledby","id","dividers","gutterBottom","autoFocus","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4235f19d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { makeStyles,withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Container from '@material-ui/core/Container';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding : \"80px\",\n justifyContent : \"center\",\n  },\nwelcome:{\nmargin:\"20px\"\n},\ngetstarted:{\nmargin : \"20px\",\nborderRadius :  \"8px\",\nbackgroundColor : \"#008CBA\",\nwidth : \"25%\",\ncolor : \"white\",\nfontSize : \"16px\",\npadding : \"15px 32px\",\nborder : \"none\",\n},\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 2,\n  },\n}));\n const styles = theme =>({\nroot:{\n margin : 0,\n padding : theme.spacing(2),      \n},\ncloseButton:{\nposition : 'absolute',\nright : theme.spacing(1),\ntop : theme.spacing(1),\ncolor : theme.palette.grey[500],\n},});\n\nconst DialogTitle = withStyles(styles)(props => {\nconst {children, classes, onClose, ...other} = props;\nreturn(\n<MuiDialogTitle disableTypography className={classes.root}{...other}>\n<Typography variant=\"h6\">{children}</Typography>\n{onClose ? (\n<IconButton arial-black=\"close\" className={classes.closeButton} onClick={onClose}><CloseIcon/></IconButton>): null}\n</MuiDialogTitle>\n);});\n\nconst DialogContent = withStyles(theme =>(\n{\nroot:{\npadding : theme.spacing(2),\n}\n}))(MuiDialogContent);\nconst DialogActions = withStyles(theme =>({\nroot:{\nmargin : 0,\npadding : theme.spacing(1),}}))(MuiDialogActions);\n\n\n\nfunction App() {\nconst [open , setOpen] = React.useState(false);\n\nconst handleClickOpen = () =>{\nsetOpen(true);\n};\n\nconst handleClose = () => {\nsetOpen(false);\n}\n\nconst classes = useStyles();\n  return (\n<header className=\"App\">\n    <div >\n      <AppBar position=\"static\" >\n        <Toolbar>\n          <Typography edge=\"start\" variant=\"h6\" className={classes.title}>\n            Quizes\n          </Typography>\n<Button color=\"inherit\" onClick={handleClickOpen}>Login</Button>\n<Button color=\"inherit\" >Sign Up</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n<Container maxWidth=\"md\">\n      <div className={classes.root}>\n        <Typography variant=\"h2\" className={classes.welcome}>\n          Welcome to Quizes\n        </Typography>\n \n        <Typography variant=\"h5\" >\n          Build your mind by tackling our amazing quiz\n        </Typography>\n     <Button  className={classes.getstarted} >Get Started</Button>\n      </div>\n    </Container>\n<div>\n\n<Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          Modal title\n        </DialogTitle>\n        <DialogContent dividers>\n          <Typography gutterBottom>\n            Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\n            in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\n          </Typography>\n          <Typography gutterBottom>\n            Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis\n            lacus vel augue laoreet rutrum faucibus dolor auctor.\n          </Typography>\n          <Typography gutterBottom>\n            Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel\n            scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus\n            auctor fringilla.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n</div>\n</header>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}